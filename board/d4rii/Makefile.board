# object files
DRIVER_SRCS   = stm32f10x_rcc.o stm32f10x_gpio.o stm32f10x_usart.o misc.o stm32f10x_iwdg.o  stm32f10x_spi.o stm32f10x_dma.o stm32f10x_adc.o stm32f10x_i2c.o
HAL_SRCS      = hal_led.o hal_uart.o hal_clocksource.o hal_timeout.o hal_wdt.o hal_delay.o hal_dma.o hal_spi.o hal_cc25xx.o hal_io.o hal_adc.o hal_storage.o hal_sbus.o
BOARD_SRCS    =  $(STARTUP) $(DRIVER_SRCS) $(HAL_SRCS) $(GENERIC_SRCS)

#crystal frequency
CRYSTAL_FREQ = 12000000

# fetch this dir during include
SELF_DIR := $(dir $(lastword $(MAKEFILE_LIST)))

# where to build
BUILD_DIR := build/$(TARGET)

#name of executable
RESULT ?= $(BUILD_DIR)/opensky_$(notdir $(TARGET))


# include path
CFLAGS += -I$(SELF_DIR)

# Tool path
ifeq ($(TOOLROOT),)
	TOOLROOT=/usr/bin
endif

# Library path
LIBROOT=driver/stm32f10x

# Tools
CC=$(TOOLROOT)/arm-none-eabi-gcc
LD=$(TOOLROOT)/arm-none-eabi-gcc
AR=$(TOOLROOT)/arm-none-eabi-ar
AS=$(TOOLROOT)/arm-none-eabi-as
OBJ=$(TOOLROOT)/arm-none-eabi-objcopy

# Code Paths
DEVICE=$(LIBROOT)/device
CORE=$(LIBROOT)/core
LINK=$(LIBROOT)/linker
PERIPH=$(LIBROOT)/peripheral_lib

# Search path for standard files

vpath %.c ./
vpath %.c $(SELF_DIR)

# Search path for perpheral library
vpath %.c $(CORE)
vpath %.c $(PERIPH)/src
vpath %.c $(DEVICE)

# Processor specific
PTYPE = STM32F10X_MD_VL
LDSCRIPT = $(LINK)/stm32f103c8.ld
STARTUP = startup_stm32f10x.o system_stm32f10x.o

# Compilation Flags

FULLASSERT = -DUSE_FULL_ASSERT

LDFLAGS+= -T$(LDSCRIPT) -mthumb -mcpu=cortex-m3
CFLAGS+= -mcpu=cortex-m3 -mthumb
CFLAGS+= -DHSE_VALUE=$(CRYSTAL_FREQ)
CFLAGS+= -I$(DEVICE) -I$(CORE) -I$(PERIPH)/inc -I.
CFLAGS+= -D$(PTYPE) -DUSE_STDPERIPH_DRIVER $(FULLASSERT) -DBUILD_TARGET=$(TARGET)
#CFLAGS+= -I$(TEMPLATEROOT)/Library/ff9/src -I$(TEMPLATEROOT)/Library

OPENOCD_PIDFILE = /tmp/openocd_opensky.pid

LINK_OBJS=$(addprefix $(BUILD_DIR)/, $(BOARD_SRCS:%.c=%.o))

$(shell mkdir -p $(BUILD_DIR) > /dev/null)
DEPFLAGS = -MT $@ -MMD -MP -MF $(BUILD_DIR)/$*.Td
POSTCOMPILE = mv -f $(BUILD_DIR)/$*.Td $(BUILD_DIR)/$*.d


# Build executable

board : $(RESULT).elf 

$(RESULT).elf : $(BOARD_SRCS:%.c=%.d)
	$(LD) $(LDFLAGS) -o $@ $(LINK_OBJS) $(LDLIBS)

%.bin: %.elf
	$(OBJ) -O binary $< $@

# compile and generate dependency info
%.o: %.c
%.o: %.c $(BUILD_DIR)/%.d
	@mkdir -p $(BUILD_DIR)
	$(CC) -c $(CFLAGS) $(DEPFLAGS) $< -o $(BUILD_DIR)/$@
	#$(CC) -MM $(CFLAGS) $< > $(BUILD_DIR)/$*.d
	$(POSTCOMPILE)

%.o: %.s
	$(CC) -c $(CFLAGS) $< -o $(BUILD_DIR)/$@

$(BUILD_DIR)/%.d: ;

clean:
	cd $(BUILD_DIR) && rm -f *.o *.d *.elf *.bin

debug: $(RESULT).elf
	openocd -f /usr/share/openocd/scripts/interface/stlink-v2.cfg -f /usr/share/openocd/scripts/target/stm32f1x.cfg & echo $$! > $(OPENOCD_PIDFILE)
	sleep 1
	arm-none-eabi-gdb --eval-command="target remote localhost:3333" $(RESULT).elf
	if [ -a $(OPENOCD_PIDFILE) ]; then kill `cat $(OPENOCD_PIDFILE)`; fi;

flash : $(RESULT).bin
	if [ -a $(OPENOCD_PIDFILE) ]; then kill `cat $(OPENOCD_PIDFILE)`; fi;
	st-flash write $(RESULT).bin 0x8000000

.PRECIOUS: $(BUILD_DIR)/%.d

# pull in dependencies

#-include $(BOARD_OBJS:.o=.d)
#-include $(BOARD_SRCS:.c=.d)

-include $(patsubst %,$(BUILD_DIR)/%.d,$(basename $(BOARD_SRCS)))




